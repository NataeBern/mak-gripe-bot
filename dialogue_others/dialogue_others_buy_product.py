from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from Python.Mak_Gripe_bot.auxiliary_files.config import token_API, chanel_URL, provider_token, ADMIN, chanel_ID
from Python.Mak_Gripe_bot.keyboards.kb import cb, kb_menu, kb_cancel, kb_application, kb_type_product
from Python.Mak_Gripe_bot.sql.sqlite import create_application, edit_application

import re
from datetime import datetime
import sqlite3



storage = MemoryStorage()
bot = Bot(token_API)
dp = Dispatcher(bot=bot,
                storage=storage)

con = sqlite3.connect('Mak_Gripe_bot\\sql\\database.db')
cur = con.cursor()


class ApplicationFromUser(StatesGroup):
    time = State()
    type_product = State()
    article = State()
    username = State()
    message = State()


dog_sign = re.compile('@')
article = 0



async def cancel_command(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'<i>–ö–∞–∫ —Å–∫–∞–∂–µ—Ç–µ!\n'
                                f'–ß–µ–º –µ—â—ë –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?</i>',
                           reply_markup=kb_menu,
                           parse_mode='HTML')
    await state.finish()

async def submit_application(message: types.Message, state: FSMContext) -> None:
    global time_msg, all_articles_tires, all_articles_wheels
    all_articles_tires = cur.execute('SELECT article FROM tires').fetchall()
    all_articles_wheels = cur.execute('SELECT article FROM wheels').fetchall()
    if (len(all_articles_tires) == 0 and len(all_articles_wheels) == 0):
        await bot.send_message(chat_id=message.from_user.id,
                               text=f'<i>–£–ø—Å—Å—Å... –ê –≤—Å–µ —Ç–æ–≤–∞—Ä—ã-—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å...\n\n'
                                    f'–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É —Ç–µ–±–µ –ø–æ–∫–∞ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å.\n'
                                    f'–ú–æ–≥—É —è –ø–æ–º–æ—á—å —á–µ–º-–Ω–∏–±—É–¥—å –µ—â—ë?</i>',
                               reply_markup=kb_menu,
                               parse_mode='HTML')
    else:
        await ApplicationFromUser.time.set()
        await bot.send_message(chat_id=message.from_user.id,
                               text=f'<i>–û—Ç–ª–∏—á–Ω–æ!\n\n'
                                    f'–î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –∑–∞—è–≤–∫—É, '
                                    f'–ø–æ –∫–æ—Ç–æ—Ä–æ–π —Å —Ç–æ–±–æ–π —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤ —Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n'
                                    f'–¢–∞–∫–∂–µ –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–æ–±—â–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:\n'
                                    f'<b> ‚Ä¢ </b>–ù–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ;\n'
                                    f'<b> ‚Ä¢ </b>–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞\n'
                                    f'<b> ‚Ä¢ </b>–í–æ–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω—è—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞.\n\n'
                                    f'–ü–æ—á–µ–º—É –Ω—É–∂–Ω–æ –ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É? '
                                    f'–ü–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º —Ç—ã –±—Ä–æ–Ω–∏—Ä—É–µ—à—å –∑–∞ —Å–æ–±–æ–π –º–µ—Å—Ç–æ'
                                    f'–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–±–æ–π —Ç–æ–≤–∞—Ä —á–∏—Å–ª–∏—Ç—Å—è —É–∂–µ –∑–∞ —Ç–æ–±–æ–π, –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞.\n\n'
                                    f'–ï—Å–ª–∏ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ –∏ —Ç—ã —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏, —Ç–æ –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º?</i> üòâ',
                               reply_markup=kb_application,
                               parse_mode="HTML")
        time_msg = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        await create_application(user_id=message.from_user.id)
        return time_msg, all_articles_tires, all_articles_wheels

async def save_time_application(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_application:
        data_application['time'] = time_msg
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'<i>–£—Ä–∞! –Ø —Ç–∞–∫ —Ä–∞–¥!</i>',
                           reply_markup=kb_cancel,
                           parse_mode='HTML')
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'<i>–î–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å —Ç—ã –≤—ã–±–µ—Ä–µ—à—å —Ç–æ—Ç –≤–∏–¥ —Ç–æ–≤–∞—Ä–∞, '
                                f'–∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.</i>',
                           reply_markup=kb_type_product,
                           parse_mode='HTML')
    await ApplicationFromUser.next()

async def save_callback_query_tires_application(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    if len(all_articles_tires) == 0:
        current_state = await state.get_state()
        if current_state is None:
            return
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=f'<i>–£–ø—Å—Å—Å... –ê –¥–∞–Ω–Ω—ã–π –≤–∏–¥ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è...\n\n'
                                    f'–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É —Ç–µ–±–µ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å.\n'
                                    f'–ú–æ–≥—É —è –ø–æ–º–æ—á—å —á–µ–º-–Ω–∏–±—É–¥—å –µ—â—ë?</i>',
                               reply_markup=kb_menu,
                               parse_mode='HTML')
        await state.finish()
    else:
        kb_articles_tires = types.InlineKeyboardMarkup(row_width=2)
        for article in range(len(all_articles_tires)):
            one_article_tires = all_articles_tires[article][0]
            kb_articles_tires.add(types.InlineKeyboardButton(text=f'{one_article_tires}',
                                                             callback_data=cb.new(msg_text=f'{one_article_tires}')))
        async with state.proxy() as data_application:
            data_application['type_product'] = '–õ–µ–≥–∫–æ–≤—ã–µ —à–∏–Ω—ã'
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=f'<i>–ß—Ç–æ –∂... –ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å.</i>',
                               reply_markup=kb_articles_tires,
                               parse_mode='HTML')
        await ApplicationFromUser.next()

async def save_callback_query_wheels_application(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    if len(all_articles_wheels) == 0:
        current_state = await state.get_state()
        if current_state is None:
            return
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=f'<i>–£–ø—Å—Å—Å... –ê –¥–∞–Ω–Ω—ã–π –≤–∏–¥ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è...\n\n'
                                    f'–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É —Ç–µ–±–µ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å.\n'
                                    f'–ú–æ–≥—É —è –ø–æ–º–æ—á—å —á–µ–º-–Ω–∏–±—É–¥—å –µ—â—ë?</i>',
                               reply_markup=kb_menu,
                               parse_mode='HTML')
        await state.finish()
    else:
        kb_articles_wheels = types.InlineKeyboardMarkup(row_width=2)
        for article in range(len(all_articles_wheels)):
            one_article_wheels = all_articles_wheels[article][0]
            kb_articles_wheels.add(types.InlineKeyboardButton(text=f'{one_article_wheels}',
                                                              callback_data=cb.new(msg_text=f'{one_article_wheels}')))
        async with state.proxy() as data_application:
            data_application['type_product'] = '–õ–∏—Ç—ã–µ –¥–∏—Å–∫–∏'
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=f'<i>–ß—Ç–æ –∂... –ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å.\n'
                                    f'–£—á—Ç–∏, —á—Ç–æ –µ—Å–ª–∏ —Ç—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—à—å –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å –Ω–∞ –Ω–∞—à–µ–º '
                                    f'<a href="{chanel_URL}">Telegram-–∫–∞–Ω–∞–ª</a>, '
                                    f'—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.</i>',
                               reply_markup=kb_articles_wheels,
                               parse_mode='HTML')
        await ApplicationFromUser.next()

async def save_article_callback_handler_application(callback_query: types.CallbackQuery,
                                                    state: FSMContext,
                                                    callback_data: dict):
    global article
    async with state.proxy() as data_application:
        article = callback_data['msg_text']
        data_application['article'] = article
    await bot.send_message(chat_id=callback_query.from_user.id,
                           text=f'<i>–ü—Ä–∏–Ω—è—Ç–æ!\n'
                                f'–ê —Å–µ–π—á–∞—Å –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ—ë –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–∫–∞–∑–∞–≤ –≤–Ω–∞—á–∞–ª–µ –∑–Ω–∞–∫ "@".</i>',
                           reply_markup=kb_cancel,
                           parse_mode='HTML')
    await ApplicationFromUser.next()
    return article

async def check_username_application(message: types.Message) -> None:
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'<i>–¢—ã –∑–∞–±—ã–ª —É–∫–∞–∑–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∑–Ω–∞–∫ "@"!\n\n'
                                f'–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?</i>',
                           reply_markup=kb_cancel,
                           parse_mode='HTML')

async def save_username_application(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_application:
        data_application['username'] = message.text
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'<i>–û—Ç–ª–∏—á–Ω–æ!\n'
                                f'–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ, —á—Ç–æ–±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø–µ—Ä–µ–¥–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</i>',
                           reply_markup=kb_cancel,
                           parse_mode='HTML')
    await ApplicationFromUser.next()

async def save_message_application(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_application:
        data_application['message'] = message.text
        await bot.send_invoice(chat_id=message.chat.id,
                               title='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É',
                               description='–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–ø–ª–∞—Ç—ã',
                               payload='Test payment format',
                               provider_token=provider_token,
                               currency='rub',
                               prices=[types.LabeledPrice(label='–¶–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã –∑–∞—è–≤–∫–∏',
                                                          amount=10000),
                                       types.LabeledPrice(label='–ù–î–°',
                                                          amount=5000)],
                               max_tip_amount=5000,
                               suggested_tip_amounts=[1000, 2000, 3000, 4000],
                               start_parameter='payment_of_the_application',
                               provider_data=None,
                               photo_url='https://images.unsplash.com/photo-1637169797848-12431f1d355c?ixlib=rb-4.0.'
                                         '3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit'
                                         '=crop&w=1964&q=80',
                               photo_size=100,
                               photo_width=800,
                               photo_height=450,
                               need_name=False,
                               need_phone_number=False,
                               need_email=False,
                               need_shipping_address=False,
                               send_phone_number_to_provider=False,
                               send_email_to_provider=False,
                               is_flexible=False,
                               disable_notification=False,
                               protect_content=False,
                               reply_to_message_id=None,
                               allow_sending_without_reply=True,
                               reply_markup=None)

async def pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery) -> None:
    await bot.answer_pre_checkout_query(pre_checkout_query_id=pre_checkout_query.id,
                                        ok=True)

async def successful_payment_save_time_application(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_application:
        if data_application['type_product'] == '–õ–µ–≥–∫–æ–≤—ã–µ —à–∏–Ω—ã':
            one_number_of_sets = cur.execute(
                'SELECT number_of_sets FROM tires WHERE article == "{article}"'.format(article=article)
            ).fetchone()
            select_msg_chanel_id = cur.execute(
                'SELECT msg_chanel_id FROM tires WHERE article == "{article}"'.format(article=article)
            ).fetchone()
            if one_number_of_sets[0] == '1':
                cur.execute(
                    'DELETE FROM tires WHERE article == "{article}" AND number_of_sets = "1"'.format(article=article)
                )
                await bot.delete_message(chat_id=chanel_ID,
                                         message_id=select_msg_chanel_id[0])
            else:
                cur.execute(
                    'UPDATE tires SET number_of_sets = "{number_of_sets}" WHERE article == "{article}"'.format(
                        number_of_sets=int(one_number_of_sets[0]) - 1,
                        article=article
                    )
                )
        elif data_application['type_product'] == '–õ–∏—Ç—ã–µ –¥–∏—Å–∫–∏':
            one_number_of_sets = cur.execute(
                'SELECT number_of_sets FROM wheels WHERE article == "{article}"'.format(article=article)
            ).fetchone()
            select_msg_chanel_id = cur.execute(
                'SELECT msg_chanel_id FROM wheels WHERE article == "{article}"'.format(article=article)
            ).fetchone()
            if one_number_of_sets[0] == '1':
                cur.execute(
                    'DELETE FROM wheels WHERE article == "{article}" AND number_of_sets = "1"'.format(article=article)
                )
                await bot.delete_message(chat_id=chanel_ID,
                                         message_id=select_msg_chanel_id[0])
            else:
                cur.execute(
                    'UPDATE wheels SET number_of_sets = "{number_of_sets}" WHERE article == "{article}"'.format(
                        number_of_sets=int(one_number_of_sets[0]) - 1,
                        article=article
                    )
                )
                cur.execute(
                    'UPDATE applications SET remaining_sets = "{remaining_sets}" WHERE user_id == "{user_id}"'.format(
                        remaining_sets=int(one_number_of_sets[0]) - 1, user_id=message.from_user.id
                    )
                )
    async with state.proxy() as data_application:
        await bot.send_message(chat_id=message.from_user.id,
                               text=f'<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É <b>{message.successful_payment.total_amount // 100} '
                                    f'{message.successful_payment.currency}</b>\n\n'
                                    f'–¢–≤–æ—è –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞–º. '
                                    f'–û–Ω–∏ —Å–≤—è–∂—É—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!</i>',
                               parse_mode='HTML')
        await bot.send_message(chat_id=message.from_user.id,
                               text='<i>–°–∫–∞–∂–∏, —è –º–æ–≥—É –µ—â—ë —Ç–µ–±–µ —á–µ–º-–Ω–∏–±—É–¥—å –ø–æ–º–æ—á—å?</i>',
                               reply_markup=kb_menu,
                               parse_mode='HTML')
        if one_number_of_sets[0] == '1':
            await bot.send_message(chat_id=ADMIN,
                                   text=f'<i><b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b></i>\n\n'
                                        f'<i>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</i> <a href="https://t.me/{data_application["username"][1:]}'
                                        f'">{data_application["username"]}</a>\n\n'
                                        f'<i>–¢–∏–ø —Ç–æ–≤–∞—Ä–∞:</i> {data_application["type_product"]}\n'
                                        f'<i>–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:</i> {article}\n'
                                        f'<i>–ö–æ–ª-–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤:</i> 0\n\n'
                                        f'<i>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:</i> {data_application["message"]}\n\n'
                                        f'<i>–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:</i> <u>{data_application["time"]}</u>',
                                   parse_mode='HTML', )
        else:
            await bot.send_message(chat_id=ADMIN,
                                   text=f'<i><b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b></i>\n\n'
                                        f'<i>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</i> <a href="https://t.me/{data_application["username"][1:]}'
                                        f'">{data_application["username"]}</a>\n\n'
                                        f'<i>–¢–∏–ø —Ç–æ–≤–∞—Ä–∞:</i> {data_application["type_product"]}\n'
                                        f'<i>–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:</i> {article}\n'
                                        f'<i>–ö–æ–ª-–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤:</i> {int(one_number_of_sets[0]) - 1}\n\n'
                                        f'<i>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:</i> {data_application["message"]}\n\n'
                                        f'<i>–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:</i> <u>{data_application["time"]}</u>',
                                   parse_mode='HTML',)
    await edit_application(state=state, user_id=message.from_user.id)
    await state.finish()



def register_handlers_dialogue_others_buy_pr(dp: Dispatcher) -> None:
    dp.register_message_handler(cancel_command,
                                Text(equals='–í –Ω–∞—á–∞–ª–æ –º–µ–Ω—é',
                                     ignore_case=True),
                                state='*')
    dp.register_message_handler(submit_application,
                                Text(equals='–•–æ—á—É –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä!',
                                     ignore_case=True),
                                state=None)
    dp.register_message_handler(save_time_application,
                                Text(equals='–î–∞, –¥–∞–≤–∞–π!',
                                     ignore_case=True),
                                state=ApplicationFromUser.time)
    dp.register_callback_query_handler(save_callback_query_tires_application,
                                       lambda callback_query: callback_query.data == 'passenger_tires',
                                       state=ApplicationFromUser.type_product)
    dp.register_callback_query_handler(save_callback_query_wheels_application,
                                       lambda callback_query: callback_query.data == 'cast_wheels',
                                       state=ApplicationFromUser.type_product)
    dp.register_callback_query_handler(save_article_callback_handler_application,
                                       cb.filter(),
                                       state=ApplicationFromUser.article)
    dp.register_message_handler(check_username_application,
                                lambda message: not dog_sign.match(message.text),
                                state=ApplicationFromUser.username)
    dp.register_message_handler(save_username_application,
                                state=ApplicationFromUser.username)
    dp.register_message_handler(save_message_application,
                                state=ApplicationFromUser.message)
    dp.register_pre_checkout_query_handler(pre_checkout_query,
                                           lambda query: True,
                                           state=ApplicationFromUser.message)
    dp.register_message_handler(successful_payment_save_time_application,
                                content_types=types.ContentType.SUCCESSFUL_PAYMENT,
                                state=ApplicationFromUser.message)
