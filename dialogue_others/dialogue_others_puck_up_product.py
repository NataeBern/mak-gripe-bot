from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from Python.Mak_Gripe_bot.auxiliary_files.config import token_API
from Python.Mak_Gripe_bot.keyboards.kb import cb_pick_up, kb_products_pick_up, kb_tire_parameters, kb_menu, \
    kb_wheels_parameters

import sqlite3



storage = MemoryStorage()
bot = Bot(token_API)
dp = Dispatcher(bot=bot,
                storage=storage)

con = sqlite3.connect('Mak_Gripe_bot\\sql\\database.db')
cur = con.cursor()


class ProductSelection(StatesGroup):
    tires_width = State()
    tires_height = State()
    tires_diameter = State()
    wheels_rim_width = State()
    wheels_diameter = State()
    wheels_departure = State()





async def pick_up_product(message: types.Message) -> None:
    global all_articles_tires, all_articles_wheels
    all_articles_tires = cur.execute('SELECT article FROM tires').fetchall()
    all_articles_wheels = cur.execute('SELECT article FROM wheels').fetchall()
    if (len(all_articles_tires) == 0 and len(all_articles_wheels) == 0):
        await bot.send_message(chat_id=message.from_user.id,
                               text=f'<i>–£–ø—Å—Å—Å... –ê –≤—Å–µ —Ç–æ–≤–∞—Ä—ã-—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å...\n\n'
                                    f'–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É —Ç–µ–±–µ –ø–æ–∫–∞ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å.\n'
                                    f'–ú–æ–≥—É —è –ø–æ–º–æ—á—å —á–µ–º-–Ω–∏–±—É–¥—å –µ—â—ë?</i>',
                               reply_markup=kb_menu,
                               parse_mode='HTML')

    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text='<i>–•–æ—Ä–æ—à–æ!\n'
                                    '–¢–æ–≥–¥–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–ø–∏—Å–∞–Ω–æ '
                                    '–ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —á–µ–º—É —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–¥–±–æ—Ä.</i>',
                               reply_markup=kb_products_pick_up,
                               parse_mode='HTML')
    return all_articles_tires, all_articles_wheels

async def pick_up_product_tires(message: types.Message) -> None:
    if len(all_articles_tires) == 0:
        await bot.send_message(chat_id=message.from_user.id,
                               text=f'<i>–£–ø—Å—Å—Å... –ê –¥–∞–Ω–Ω—ã–π –≤–∏–¥ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è...\n\n'
                                    f'–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É —Ç–µ–±–µ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å.\n'
                                    f'–ú–æ–≥—É —è –ø–æ–º–æ—á—å —á–µ–º-–Ω–∏–±—É–¥—å –µ—â—ë?</i>',
                               reply_markup=kb_menu,
                               parse_mode='HTML')
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text='<i>–ü—Ä–∏–Ω—è—Ç–æ! –®–∏–Ω—ã, —Ç–∞–∫ —à–∏–Ω—ã.\n'
                                    '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ –∫–∞–∫–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É —Ç–µ–±–µ –≤–∞–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–≤–æ–π —Ç–æ–≤–∞—Ä '
                                    '–∏ —è —Ç–µ–±–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤—ã—à–ª—é –∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç—ã.</i>',
                               reply_markup=kb_tire_parameters,
                               parse_mode='HTML')

async def pick_up_product_tires_width(message: types.Message) -> None:
    all_width_tires = cur.execute('SELECT width FROM tires').fetchall()
    kb_width_tires = types.InlineKeyboardMarkup(row_width=2)
    for width in range(len(all_width_tires)):
        one_width_tires = all_width_tires[width][0]
        kb_width_tires.add(types.InlineKeyboardButton(text=f'{one_width_tires}',
                                                      callback_data=cb_pick_up.new(msg_pick_up=f'{one_width_tires}')))
    await ProductSelection.tires_width.set()
    await bot.send_message(chat_id=message.from_user.id,
                           text='<i>–í–æ—Ç! –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ.\n'
                                '–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ.'
                                '–Ø —Ç—É—Ç –∂–µ –≤—ã—à–ª—é –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º —Ç–æ–≤–∞—Ä–µ, '
                                '—á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–æ–≤–∞—Ä–æ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ.</i>',
                           reply_markup=kb_width_tires,
                           parse_mode='HTML')

async def send_pick_up_product_tires_width(callback_query: types.CallbackQuery,
                                           callback_data: dict,
                                           state: FSMContext) -> None:
    async with state.proxy():
        width = callback_data['msg_pick_up']
        send_all_tires_width = cur.execute(
            'SELECT * from tires WHERE width == "{width}"'.format(width=width)
        ).fetchall()
        for tires_width in send_all_tires_width:
            await bot.send_photo(chat_id=callback_query.from_user.id,
                                 photo=tires_width[1],
                                 caption=f'<b>{tires_width[2]} {tires_width[3]} '
                                         f'{tires_width[4]}/{tires_width[5]} D{tires_width[6]} '
                                         f'{tires_width[7]}{tires_width[8]}</b>\n\n'
                                         f'–¶–µ–Ω–∞: <u>{tires_width[11]}</u> —Ä—É–±–ª–µ–π\n'
                                         f'–ê—Ä—Ç–∏–∫—É–ª: {tires_width[0]}\n\n'
                                         f'<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</b>\n\n'
                                         f'üöò –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: –õ–µ–≥–∫–æ–≤—ã–µ —à–∏–Ω—ã\n'
                                         f'üöò –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ë/—É\n'
                                         f'üöò –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {tires_width[2]}\n'
                                         f'üöò –ú–æ–¥–µ–ª—å: {tires_width[3]}\n'
                                         f'üöò –®–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞: {tires_width[4]}/{tires_width[5]}\n'
                                         f'üöò –î–∏–∞–º–µ—Ç—Ä –≤ –¥—é–π–º–∞—Ö: {tires_width[6]}\n'
                                         f'üöò –ò–Ω–¥–µ–∫—Å –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏: {tires_width[7]}{tires_width[8]}\n'
                                         f'üöò –í—Ä–µ–º—è –≥–æ–¥–∞: {tires_width[9]}\n'
                                         f'üöò Run Flat: –ù–µ—Ç\n'
                                         f'üöò –û—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞: {tires_width[10]} –º–º.\n\n',
                                 reply_markup=kb_menu,
                                 parse_mode='HTML')
    await state.finish()

async def pick_up_product_tires_height(message: types.Message) -> None:
    all_height_tires = cur.execute('SELECT height FROM tires').fetchall()
    kb_height_tires = types.InlineKeyboardMarkup(row_width=2)
    for height in range(len(all_height_tires)):
        one_height_tires = all_height_tires[height][0]
        kb_height_tires.add(types.InlineKeyboardButton(text=f'{one_height_tires}',
                                                       callback_data=cb_pick_up.new(msg_pick_up=f'{one_height_tires}')))
    await ProductSelection.tires_height.set()
    await bot.send_message(chat_id=message.from_user.id,
                           text='<i>–í–æ—Ç! –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ.\n'
                                '–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ.'
                                '–Ø —Ç—É—Ç –∂–µ –≤—ã—à–ª—é –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º —Ç–æ–≤–∞—Ä–µ, '
                                '—á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–æ–≤–∞—Ä–æ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ.</i>',
                           reply_markup=kb_height_tires,
                           parse_mode='HTML')

async def send_pick_up_product_tires_height(callback_query: types.CallbackQuery,
                                            callback_data: dict,
                                            state: FSMContext) -> None:
    async with state.proxy():
        height = callback_data['msg_pick_up']
        send_all_tires_height = cur.execute(
            'SELECT * from tires WHERE height == "{height}"'.format(height=height)
        ).fetchall()
        for tires_height in send_all_tires_height:
            await bot.send_photo(chat_id=callback_query.from_user.id,
                                 photo=tires_height[1],
                                 caption=f'<b>{tires_height[2]} {tires_height[3]} '
                                         f'{tires_height[4]}/{tires_height[5]} D{tires_height[6]} '
                                         f'{tires_height[7]}{tires_height[8]}</b>\n\n'
                                         f'–¶–µ–Ω–∞: <u>{tires_height[11]}</u> —Ä—É–±–ª–µ–π\n'
                                         f'–ê—Ä—Ç–∏–∫—É–ª: {tires_height[0]}\n\n'
                                         f'<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</b>\n\n'
                                         f'üöò –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: –õ–µ–≥–∫–æ–≤—ã–µ —à–∏–Ω—ã\n'
                                         f'üöò –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ë/—É\n'
                                         f'üöò –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {tires_height[2]}\n'
                                         f'üöò –ú–æ–¥–µ–ª—å: {tires_height[3]}\n'
                                         f'üöò –®–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞: {tires_height[4]}/{tires_height[5]}\n'
                                         f'üöò –î–∏–∞–º–µ—Ç—Ä –≤ –¥—é–π–º–∞—Ö: {tires_height[6]}\n'
                                         f'üöò –ò–Ω–¥–µ–∫—Å –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏: {tires_height[7]}{tires_height[8]}\n'
                                         f'üöò –í—Ä–µ–º—è –≥–æ–¥–∞: {tires_height[9]}\n'
                                         f'üöò Run Flat: –ù–µ—Ç\n'
                                         f'üöò –û—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞: {tires_height[10]} –º–º.\n\n',
                                 reply_markup=kb_menu,
                                 parse_mode='HTML')
    await state.finish()

async def pick_up_product_tires_diameter(message: types.Message) -> None:
    all_diameter_tires = cur.execute('SELECT diameter FROM tires').fetchall()
    kb_diameter_tires = types.InlineKeyboardMarkup(row_width=2)
    for diameter in range(len(all_diameter_tires)):
        one_diameter_tires = all_diameter_tires[diameter][0]
        kb_diameter_tires.add(types.InlineKeyboardButton(text=f'{one_diameter_tires}',
                                                         callback_data=cb_pick_up.new(msg_pick_up=f'{one_diameter_tires}')))

    await ProductSelection.tires_diameter.set()
    await bot.send_message(chat_id=message.from_user.id,
                           text='<i>–í–æ—Ç! –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ.\n'
                                '–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ.'
                                '–Ø —Ç—É—Ç –∂–µ –≤—ã—à–ª—é –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º —Ç–æ–≤–∞—Ä–µ, '
                                '—á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–æ–≤–∞—Ä–æ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ.</i>',
                           reply_markup=kb_diameter_tires,
                           parse_mode='HTML')

async def send_pick_up_product_tires_diameter(callback_query: types.CallbackQuery,
                                              callback_data: dict,
                                              state: FSMContext) -> None:
    async with state.proxy():
        diameter = callback_data['msg_pick_up']
        send_all_tires_diameter = cur.execute(
            'SELECT * from tires WHERE diameter == "{diameter}"'.format(diameter=diameter)
        ).fetchall()
        for tires_diameter in send_all_tires_diameter:
            await bot.send_photo(chat_id=callback_query.from_user.id,
                                 photo=tires_diameter[1],
                                 caption=f'<b>{tires_diameter[2]} {tires_diameter[3]} '
                                         f'{tires_diameter[4]}/{tires_diameter[5]} D{tires_diameter[6]} '
                                         f'{tires_diameter[7]}{tires_diameter[8]}</b>\n\n'
                                         f'–¶–µ–Ω–∞: <u>{tires_diameter[11]}</u> —Ä—É–±–ª–µ–π\n'
                                         f'–ê—Ä—Ç–∏–∫—É–ª: {tires_diameter[0]}\n\n'
                                         f'<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</b>\n\n'
                                         f'üöò –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: –õ–µ–≥–∫–æ–≤—ã–µ —à–∏–Ω—ã\n'
                                         f'üöò –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ë/—É\n'
                                         f'üöò –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {tires_diameter[2]}\n'
                                         f'üöò –ú–æ–¥–µ–ª—å: {tires_diameter[3]}\n'
                                         f'üöò –®–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞: {tires_diameter[4]}/{tires_diameter[5]}\n'
                                         f'üöò –î–∏–∞–º–µ—Ç—Ä –≤ –¥—é–π–º–∞—Ö: {tires_diameter[6]}\n'
                                         f'üöò –ò–Ω–¥–µ–∫—Å –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏: {tires_diameter[7]}{tires_diameter[8]}\n'
                                         f'üöò –í—Ä–µ–º—è –≥–æ–¥–∞: {tires_diameter[9]}\n'
                                         f'üöò Run Flat: –ù–µ—Ç\n'
                                         f'üöò –û—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞: {tires_diameter[10]} –º–º.\n\n',
                                 reply_markup=kb_menu,
                                 parse_mode='HTML')
    await state.finish()

async def pick_up_product_wheels(message: types.Message) -> None:
    if len(all_articles_wheels) == 0:
        await bot.send_message(chat_id=message.from_user.id,
                               text=f'<i>–£–ø—Å—Å—Å... –ê –¥–∞–Ω–Ω—ã–π –≤–∏–¥ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è...\n\n'
                                    f'–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É —Ç–µ–±–µ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å.\n'
                                    f'–ú–æ–≥—É —è –ø–æ–º–æ—á—å —á–µ–º-–Ω–∏–±—É–¥—å –µ—â—ë?</i>',
                               reply_markup=kb_menu,
                               parse_mode='HTML')
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text='<i>–Ø –ø–æ–Ω—è–ª —Ç–µ–±—è\n'
                                    '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ –∫–∞–∫–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É —Ç–µ–±–µ –≤–∞–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–≤–æ–π —Ç–æ–≤–∞—Ä '
                                    '–∏ —è —Ç–µ–±–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤—ã—à–ª—é –∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç—ã.</i>',
                               reply_markup=kb_wheels_parameters,
                               parse_mode='HTML')

async def pick_up_product_wheels_rim_width(message: types.Message) -> None:
    all_rim_width_wheels = cur.execute('SELECT rim_width FROM wheels').fetchall()
    kb_rim_width_wheels = types.InlineKeyboardMarkup(row_width=2)
    for rim_width in range(len(all_rim_width_wheels)):
        one_rim_width_wheels = all_rim_width_wheels[rim_width][0]
        kb_rim_width_wheels.add(types.InlineKeyboardButton(text=f'{one_rim_width_wheels}',
                                                           callback_data=cb_pick_up.new(
                                                               msg_pick_up=f'{one_rim_width_wheels}')))
    await ProductSelection.wheels_rim_width.set()
    await bot.send_message(chat_id=message.from_user.id,
                           text='<i>–í–æ—Ç! –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ.\n'
                                '–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ.'
                                '–Ø —Ç—É—Ç –∂–µ –≤—ã—à–ª—é –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º —Ç–æ–≤–∞—Ä–µ, '
                                '—á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–æ–≤–∞—Ä–æ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ.</i>',
                           reply_markup=kb_rim_width_wheels,
                           parse_mode='HTML')

async def send_pick_up_product_wheels_rim_width(callback_query: types.CallbackQuery,
                                                callback_data: dict,
                                                state: FSMContext) -> None:
    async with state.proxy():
        rim_width = callback_data['msg_pick_up']
        send_all_wheels_rim_width = cur.execute(
            'SELECT * from wheels WHERE rim_width == "{rim_width}"'.format(rim_width=rim_width)
        ).fetchall()
        for wheels_rim_width in send_all_wheels_rim_width:
            await bot.send_photo(chat_id=callback_query.from_user.id,
                                 photo=wheels_rim_width[1],
                                 caption=f'<b>{wheels_rim_width[2]} {wheels_rim_width[3]} '
                                         f'D{wheels_rim_width[5]} {wheels_rim_width[7]}x'
                                         f'{wheels_rim_width[8]}</b>\n\n'
                                         f'–¶–µ–Ω–∞: <u>{wheels_rim_width[10]}</u> —Ä—É–±–ª–µ–π\n'
                                         f'–ê—Ä—Ç–∏–∫—É–ª: {wheels_rim_width[0]}\n\n'
                                         f'<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</b>\n\n'
                                         f'üöò –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: –î–∏—Å–∫–∏\n'
                                         f'üöò –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ë/—É\n'
                                         f'üöò –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {wheels_rim_width[2]}\n'
                                         f'üöò –ú–æ–¥–µ–ª—å: {wheels_rim_width[3]}\n'
                                         f'üöò –®–∏—Ä–∏–Ω–∞ –æ–±–æ—Ä–æ—Ç–∞ –≤ –¥—é–π–º–∞—Ö: {wheels_rim_width[4]}\n'
                                         f'üöò –î–∏–∞–º–µ—Ç—Ä –≤ –¥—é–π–º–∞—Ö: {wheels_rim_width[5]}\n'
                                         f'üöò –í—ã–ª–µ—Ç (ET): {wheels_rim_width[6]}\n'
                                         f'üöò –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π: {wheels_rim_width[7]}\n'
                                         f'üöò –î–∏–∞–º–µ—Ç—Ä —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–≤–µ—Ä—Å—Ç–∏–π: {wheels_rim_width[8]}\n'
                                         f'üöò –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ (DIA): {wheels_rim_width[9]}\n'
                                         f'üöò –¢–∏–ø –¥–∏—Å–∫–∞: –õ–∏—Ç—ã–µ\n\n',
                                 reply_markup=kb_menu,
                                 parse_mode='HTML')
    await state.finish()

async def pick_up_product_wheels_diameter(message: types.Message) -> None:
    all_diameter_wheels = cur.execute('SELECT diameter FROM wheels').fetchall()
    kb_diameter_wheels = types.InlineKeyboardMarkup(row_width=2)
    for diameter in range(len(all_diameter_wheels)):
        one_diameter_wheels = all_diameter_wheels[diameter][0]
        kb_diameter_wheels.add(types.InlineKeyboardButton(text=f'{one_diameter_wheels}',
                                                          callback_data=cb_pick_up.new(
                                                              msg_pick_up=f'{one_diameter_wheels}')))
    await ProductSelection.wheels_diameter.set()
    await bot.send_message(chat_id=message.from_user.id,
                           text='<i>–í–æ—Ç! –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ.\n'
                                '–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ.'
                                '–Ø —Ç—É—Ç –∂–µ –≤—ã—à–ª—é –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º —Ç–æ–≤–∞—Ä–µ, '
                                '—á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–æ–≤–∞—Ä–æ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ.</i>',
                           reply_markup=kb_diameter_wheels,
                           parse_mode='HTML')

async def send_pick_up_product_wheels_diameter(callback_query: types.CallbackQuery,
                                               callback_data: dict,
                                               state: FSMContext) -> None:
    async with state.proxy():
        diameter = callback_data['msg_pick_up']
        send_all_wheels_diameter = cur.execute(
            'SELECT * from wheels WHERE diameter == "{diameter}"'.format(diameter=diameter)
        ).fetchall()
        for wheels_diameter in send_all_wheels_diameter:
            await bot.send_photo(chat_id=callback_query.from_user.id,
                                 photo=wheels_diameter[1],
                                 caption=f'<b>{wheels_diameter[2]} {wheels_diameter[3]} '
                                         f'D{wheels_diameter[5]} {wheels_diameter[7]}x'
                                         f'{wheels_diameter[8]}</b>\n\n'
                                         f'–¶–µ–Ω–∞: <u>{wheels_diameter[10]}</u> —Ä—É–±–ª–µ–π\n'
                                         f'–ê—Ä—Ç–∏–∫—É–ª: {wheels_diameter[0]}\n\n'
                                         f'<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</b>\n\n'
                                         f'üöò –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: –î–∏—Å–∫–∏\n'
                                         f'üöò –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ë/—É\n'
                                         f'üöò –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {wheels_diameter[2]}\n'
                                         f'üöò –ú–æ–¥–µ–ª—å: {wheels_diameter[3]}\n'
                                         f'üöò –®–∏—Ä–∏–Ω–∞ –æ–±–æ—Ä–æ—Ç–∞ –≤ –¥—é–π–º–∞—Ö: {wheels_diameter[4]}\n'
                                         f'üöò –î–∏–∞–º–µ—Ç—Ä –≤ –¥—é–π–º–∞—Ö: {wheels_diameter[5]}\n'
                                         f'üöò –í—ã–ª–µ—Ç (ET): {wheels_diameter[6]}\n'
                                         f'üöò –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π: {wheels_diameter[7]}\n'
                                         f'üöò –î–∏–∞–º–µ—Ç—Ä —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–≤–µ—Ä—Å—Ç–∏–π: {wheels_diameter[8]}\n'
                                         f'üöò –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ (DIA): {wheels_diameter[9]}\n'
                                         f'üöò –¢–∏–ø –¥–∏—Å–∫–∞: –õ–∏—Ç—ã–µ\n\n',
                                 reply_markup=kb_menu,
                                 parse_mode='HTML')
    await state.finish()

async def pick_up_product_wheels_departure(message: types.Message) -> None:
    all_departure_wheels = cur.execute('SELECT departure FROM wheels').fetchall()
    kb_departure_wheels = types.InlineKeyboardMarkup(row_width=2)
    for departure in range(len(all_departure_wheels)):
        one_departure_wheels = all_departure_wheels[departure][0]
        kb_departure_wheels.add(types.InlineKeyboardButton(text=f'{one_departure_wheels}',
                                                           callback_data=cb_pick_up.new(
                                                               msg_pick_up=f'{one_departure_wheels}')))
    await ProductSelection.wheels_departure.set()
    await bot.send_message(chat_id=message.from_user.id,
                           text='<i>–í–æ—Ç! –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ.\n'
                                '–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ.'
                                '–Ø —Ç—É—Ç –∂–µ –≤—ã—à–ª—é –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º —Ç–æ–≤–∞—Ä–µ, '
                                '—á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–æ–≤–∞—Ä–æ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ.</i>',
                           reply_markup=kb_departure_wheels,
                           parse_mode='HTML')

async def send_pick_up_product_wheels_departure(callback_query: types.CallbackQuery,
                                                callback_data: dict,
                                                state: FSMContext) -> None:
    async with state.proxy():
        departure = callback_data['msg_pick_up']
        send_all_wheels_departure = cur.execute(
            'SELECT * from wheels WHERE departure == "{departure}"'.format(departure=departure)
        ).fetchall()
        for wheels_departure in send_all_wheels_departure:
            await bot.send_photo(chat_id=callback_query.from_user.id,
                                 photo=wheels_departure[1],
                                 caption=f'<b>{wheels_departure[2]} {wheels_departure[3]} '
                                         f'D{wheels_departure[5]} {wheels_departure[7]}x'
                                         f'{wheels_departure[8]}</b>\n\n'
                                         f'–¶–µ–Ω–∞: <u>{wheels_departure[10]}</u> —Ä—É–±–ª–µ–π\n'
                                         f'–ê—Ä—Ç–∏–∫—É–ª: {wheels_departure[0]}\n\n'
                                         f'<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</b>\n\n'
                                         f'üöò –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: –î–∏—Å–∫–∏\n'
                                         f'üöò –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ë/—É\n'
                                         f'üöò –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {wheels_departure[2]}\n'
                                         f'üöò –ú–æ–¥–µ–ª—å: {wheels_departure[3]}\n'
                                         f'üöò –®–∏—Ä–∏–Ω–∞ –æ–±–æ—Ä–æ—Ç–∞ –≤ –¥—é–π–º–∞—Ö: {wheels_departure[4]}\n'
                                         f'üöò –î–∏–∞–º–µ—Ç—Ä –≤ –¥—é–π–º–∞—Ö: {wheels_departure[5]}\n'
                                         f'üöò –í—ã–ª–µ—Ç (ET): {wheels_departure[6]}\n'
                                         f'üöò –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π: {wheels_departure[7]}\n'
                                         f'üöò –î–∏–∞–º–µ—Ç—Ä —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–≤–µ—Ä—Å—Ç–∏–π: {wheels_departure[8]}\n'
                                         f'üöò –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ (DIA): {wheels_departure[9]}\n'
                                         f'üöò –¢–∏–ø –¥–∏—Å–∫–∞: –õ–∏—Ç—ã–µ\n\n',
                                 reply_markup=kb_menu,
                                 parse_mode='HTML')
    await state.finish()



def register_handlers_dialogue_others_pick_up_pr(dp: Dispatcher) -> None:
    dp.register_message_handler(pick_up_product,
                                Text(equals='–•–æ—á—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä!',
                                     ignore_case=True),
                                state=None)
    dp.register_message_handler(pick_up_product_tires,
                                Text(equals='–ü–æ —à–∏–Ω–∞–º',
                                     ignore_case=True),
                                state=None)
    dp.register_message_handler(pick_up_product_tires_width,
                                Text(equals='–®–∏—Ä–∏–Ω–∞',
                                     ignore_case=True),
                                state=None)
    dp.register_callback_query_handler(send_pick_up_product_tires_width,
                                       cb_pick_up.filter(),
                                       state=ProductSelection.tires_width)
    dp.register_message_handler(pick_up_product_tires_height,
                                Text(equals='–í—ã—Å–æ—Ç–∞',
                                     ignore_case=True),
                                state=None)
    dp.register_callback_query_handler(send_pick_up_product_tires_height,
                                       cb_pick_up.filter(),
                                       state=ProductSelection.tires_height)
    dp.register_message_handler(pick_up_product_tires_diameter,
                                Text(equals='–î–∏–∞–º–µ—Ç—Ä —à–∏–Ω—ã',
                                     ignore_case=True),
                                state=None)
    dp.register_callback_query_handler(send_pick_up_product_tires_diameter,
                                       cb_pick_up.filter(),
                                       state=ProductSelection.tires_diameter)
    dp.register_message_handler(pick_up_product_wheels,
                                Text(equals='–ü–æ –¥–∏—Å–∫–∞–º',
                                     ignore_case=True),
                                state=None)
    dp.register_message_handler(pick_up_product_wheels_rim_width,
                                Text(equals='–®–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞',
                                     ignore_case=True),
                                state=None)
    dp.register_callback_query_handler(send_pick_up_product_wheels_rim_width,
                                       cb_pick_up.filter(),
                                       state=ProductSelection.wheels_rim_width)
    dp.register_message_handler(pick_up_product_wheels_diameter,
                                Text(equals='–î–∏–∞–º–µ—Ç—Ä –∫–æ–ª–µ—Å–∞',
                                     ignore_case=True),
                                state=None)
    dp.register_callback_query_handler(send_pick_up_product_wheels_diameter,
                                       cb_pick_up.filter(),
                                       state=ProductSelection.wheels_diameter)
    dp.register_message_handler(pick_up_product_wheels_departure,
                                Text(equals='–í—ã–ª–µ—Ç –∏–ª–∏ ET',
                                     ignore_case=True),
                                state=None)
    dp.register_callback_query_handler(send_pick_up_product_wheels_departure,
                                       cb_pick_up.filter(),
                                       state=ProductSelection.wheels_departure)
