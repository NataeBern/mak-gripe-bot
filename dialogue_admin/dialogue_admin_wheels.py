from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from Python.Mak_Gripe_bot.auxiliary_files.config import token_API, ADMIN, chanel_URL, chanel_ID, bot_URL
from Python.Mak_Gripe_bot.keyboards.kb import kb_cancel_admin, kb_menu_admin
from Python.Mak_Gripe_bot.sql.sqlite import random_article, create_wheels, edit_wheels

import sqlite3



storage = MemoryStorage()
bot = Bot(token_API)
dp = Dispatcher(bot=bot,
                storage=storage)



class NewPostWheels(StatesGroup):
    photo = State()
    manufacturer = State()
    model = State()
    rim_width = State()
    diameter = State()
    departure = State()
    number_of_holes = State()
    diameter_hole = State()
    central_hole = State()
    price = State()
    number_of_sets = State()



async def create_post_wheels(message: types.Message) -> None:
    await NewPostWheels.photo.set()
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–ü—Ä–∏–Ω—è—Ç–æ!\n\n'
                                f'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞, '
                                f'–∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤ –¥–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–µ.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await create_wheels(random_article=random_article)

async def check_photo_wheels(message: types.Message) -> None:
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!\n'
                                f'–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')

async def save_photo_wheels(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_wheels:
        data_wheels['photo'] = message.photo[2].file_id
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n'
                                f'–ê —Å–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ —ç—Ç–∏—Ö –∫–æ–ª—ë—Å.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostWheels.next()

async def save_manufacturer_wheels(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_wheels:
        data_wheels['manufacturer'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–ß—Ç–æ –∂... –ù–∞–∑–æ–≤–∏ –º–Ω–µ –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostWheels.next()

async def save_model_wheels(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_wheels:
        data_wheels['model'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–î–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö.\n'
                                f'–ö–∞–∫–æ–≤–∞ —à–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞ –∫–æ–ª–µ—Å–∞? –£–∫–∞–∂–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥—é–π–º–∞—Ö.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostWheels.next()

async def check_rim_width_wheels(message: types.Message) -> None:
    await bot.send_message(chat_id=ADMIN,
                           text=f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ —Ä–µ–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –æ–±–æ–¥–∞ –∫–æ–ª–µ—Å–∞\n\n'
                                f'–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')

async def save_rim_width_wheels(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_wheels:
        data_wheels['rim_width'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–ê –¥–∏–∞–º–µ—Ç—Ä –∫–∞–∫–æ–π?\n'
                                f'–ù–∞–ø–∏—à–∏ –º–Ω–µ –µ–≥–æ –≤ –¥—é–π–º–∞—Ö.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostWheels.next()

async def check_diameter_wheels(message: types.Message) -> None:
    await bot.send_message(chat_id=ADMIN,
                           text=f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä!\n\n'
                                f'–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')

async def save_diameter_wheels(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_wheels:
        data_wheels['diameter'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–ê —á—Ç–æ –∫–∞—Å–∞–µ–º–æ –≤—ã–ª–µ—Ç–∞ –∫–æ–ª–µ—Å–∞ –∏–ª–∏ –ï–¢?\n'
                                f'–ö–∞–∫–æ–µ —Ç—É—Ç –∑–Ω–∞—á–µ–Ω–∏–µ?</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostWheels.next()

async def check_departure_wheels(message: types.Message) -> None:
    await bot.send_message(chat_id=ADMIN,
                           text=f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–ª–µ—Ç–∞!\n\n'
                                f'–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')

async def save_departure_wheels(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_wheels:
        data_wheels['departure'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–∫–∂–µ –≤–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π –≤ –∫–æ–ª–µ—Å–µ... '
                                f'–ò–ª–∏ –Ω–µ—Ç? üòè</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostWheels.next()

async def check_number_of_holes_wheels(message: types.Message) -> None:
    await bot.send_message(chat_id=ADMIN,
                           text=f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π –¥–ª—è –∫–æ–ª–µ—Å–∞!\n\n'
                                f'–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')

async def save_number_of_holes_wheels(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_wheels:
        data_wheels['number_of_holes'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–¢–µ–ø–µ—Ä—å –ø–æ—Ä–∞ —É–∫–∞–∑–∞—Ç—å –¥–∏–∞–º–µ—Ç—Ä —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–≤–µ—Ä—Å—Ç–∏–π.\n'
                                f'–ù–∞–ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –¥–µ—Å—è—Ç—ã—Ö –¥–æ–ª–µ–π.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostWheels.next()

async def check_diameter_hole_wheels(message: types.Message) -> None:
    await bot.send_message(chat_id=ADMIN,
                           text=f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä –æ—Ç–≤–µ—Ä—Å—Ç–∏–π –∫–æ–ª–µ—Å–∞!\n\n'
                                f'–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')

async def save_diameter_hole_wheels(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_wheels:
        data_wheels['diameter_hole'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–£—Ä–∞! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ!\n'
                                f'–†–∞–∑ –º—ã —É–∫–∞–∑–∞–ª–∏ –¥–∏–∞–º–µ—Ç—Ä —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–≤–µ—Ä—Å—Ç–∏–π –≤ –∫–æ–ª–µ—Å–µ, —Ç–æ '
                                f'–¥–∞–≤–∞–π —Ç–∞–∫–∂–µ —É–∫–∞–∂–µ–º –∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ –∏–ª–∏ DIA.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostWheels.next()

async def check_central_hole_wheels(message: types.Message) -> None:
    await bot.send_message(chat_id=ADMIN,
                           text=f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è DIA!\n\n'
                                f'–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')

async def save_central_hole_wheels(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_wheels:
        data_wheels['central_hole'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –º–Ω–µ —Ü–µ–Ω—É –∑–∞ –æ–¥–∏–Ω –∫–æ–º–ø–ª–µ–∫—Ç –∫–æ–ª—ë—Å.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostWheels.next()

async def check_price_wheels(message: types.Message) -> None:
    await bot.send_message(chat_id=ADMIN,
                           text=f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞!\n\n'
                                f'–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')

async def save_price_wheels(message: types.Message, state: FSMContext):
    async with state.proxy() as data_wheels:
        data_wheels['price'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ!\n\n'
                                f'–î–∞–≤–∞–π –∑–∞–Ω–µ—Å—ë–º –≤ –Ω–∞—à—É –±–∞–∑—É —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –±—É–¥–µ—Ç —ç—Ç–∏—Ö –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤, '
                                f'—á—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –µ–≥–æ –∏ —É–º–µ–Ω—å—à–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, '
                                f'–∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –ø—Ä–æ–¥–∞–Ω –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostWheels.next()

async def check_number_of_sets_wheels(message: types.Message) -> None:
    await bot.send_message(chat_id=ADMIN,
                           text=f'–¢—ã —É–∫–∞–∑—ã–≤–∞–µ—à—å –º–Ω–µ –Ω–µ —á–∏—Å–ª–æ!\n\n'
                                f'–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')

async def save_number_of_sets_wheels(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_wheels:
        data_wheels['number_of_sets'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ! –Ø –∏ —Å–∞–º —É–∂–µ –ø–æ–¥—É—Å—Ç–∞–ª...\n\n'
                                f'–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∏—Å—å –≤ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ –Ω–∞ —Ç–≤–æ—ë–º Telegram-–∫–∞–Ω–∞–ª–µ - '
                                f'<a href="{chanel_URL}">MakGripe | –ú–∞–∫–ì—Ä–∞–π–ø</a></i>',
                           reply_markup=kb_menu_admin,
                           parse_mode='HTML')
    async with state.proxy() as data_wheels:
        msg = await bot.send_photo(chat_id=chanel_ID,
                                   photo=data_wheels['photo'],
                                   caption=f'<b>{data_wheels["manufacturer"]} {data_wheels["model"]} '
                                           f'D{data_wheels["diameter"]} {data_wheels["number_of_holes"]}x'
                                           f'{data_wheels["diameter_hole"]}</b>\n\n'
                                           f'–¶–µ–Ω–∞: <u>{data_wheels["price"]}</u> —Ä—É–±–ª–µ–π\n'
                                           f'–ê—Ä—Ç–∏–∫—É–ª: {random_article}\n\n'
                                           f'<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</b>\n\n'
                                           f'üöò –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: –î–∏—Å–∫–∏\n'
                                           f'üöò –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ë/—É\n'
                                           f'üöò –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {data_wheels["manufacturer"]}\n'
                                           f'üöò –ú–æ–¥–µ–ª—å: {data_wheels["model"]}\n'
                                           f'üöò –®–∏—Ä–∏–Ω–∞ –æ–±–æ—Ä–æ—Ç–∞ –≤ –¥—é–π–º–∞—Ö: {data_wheels["rim_width"]}\n'
                                           f'üöò –î–∏–∞–º–µ—Ç—Ä –≤ –¥—é–π–º–∞—Ö: {data_wheels["diameter"]}\n'
                                           f'üöò –í—ã–ª–µ—Ç (ET): {data_wheels["departure"]}\n'
                                           f'üöò –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π: {data_wheels["number_of_holes"]}\n'
                                           f'üöò –î–∏–∞–º–µ—Ç—Ä —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–≤–µ—Ä—Å—Ç–∏–π: {data_wheels["diameter_hole"]}\n'
                                           f'üöò –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ (DIA): {data_wheels["central_hole"]}\n'
                                           f'üöò –¢–∏–ø –¥–∏—Å–∫–∞: –õ–∏—Ç—ã–µ\n\n'
                                           f'–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, '
                                           f'–Ω–∞–ø–∏—Å–∞–≤ –Ω–∞—à–µ–º—É Telegram-–±–æ—Ç—É - <a href="{bot_URL}">Mak_Gripe_bot</a>',
                                   parse_mode='HTML')
        con = sqlite3.connect('C:\\Users\\nastm\\OneDrive\\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\\Python\\Mak_Gripe_bot\\sql\\database.db')
        with con:
            cur = con.cursor()
            cur.execute(
                'UPDATE wheels SET msg_chanel_id = "{msg_chanel_id}" WHERE article == "{article}"'.format(
                    msg_chanel_id=msg.message_id,
                    article=random_article
                )
            )

    await edit_wheels(state=state, random_article=random_article)
    await state.finish()



def register_handlers_dialogue_admin_wheels(dp: Dispatcher) -> None:
    dp.register_message_handler(create_post_wheels,
                                Text(equals='–õ–∏—Ç—ã–µ –¥–∏—Å–∫–∏',
                                     ignore_case=True),
                                state=None)
    dp.register_message_handler(check_photo_wheels,
                                lambda message: not message.photo,
                                state=NewPostWheels.photo)
    dp.register_message_handler(save_photo_wheels,
                                content_types=['photo'],
                                state=NewPostWheels.photo)
    dp.register_message_handler(save_manufacturer_wheels,
                                state=NewPostWheels.manufacturer)
    dp.register_message_handler(save_model_wheels,
                                state=NewPostWheels.model)
    dp.register_message_handler(check_rim_width_wheels,
                                lambda message: not message.text.isdigit() or float(message.text) > 10,
                                state=NewPostWheels.rim_width)
    dp.register_message_handler(save_rim_width_wheels,
                                state=NewPostWheels.rim_width)
    dp.register_message_handler(check_diameter_wheels,
                                lambda message: not message.text.isdigit() or float(message.text) > 100,
                                state=NewPostWheels.diameter)
    dp.register_message_handler(save_diameter_wheels,
                                state=NewPostWheels.diameter)
    dp.register_message_handler(check_departure_wheels,
                                lambda message: not message.text.isdigit() or float(message.text) > 100,
                                state=NewPostWheels.departure)
    dp.register_message_handler(save_departure_wheels,
                                state=NewPostWheels.departure)
    dp.register_message_handler(check_number_of_holes_wheels,
                                lambda message: not message.text.isdigit() or float(message.text) > 10,
                                state=NewPostWheels.number_of_holes)
    dp.register_message_handler(save_number_of_holes_wheels,
                                state=NewPostWheels.number_of_holes)
    dp.register_message_handler(check_diameter_hole_wheels,
                                lambda message: not message.text.isdigit() or float(message.text) > 1000,
                                state=NewPostWheels.diameter_hole)
    dp.register_message_handler(save_diameter_hole_wheels,
                                state=NewPostWheels.diameter_hole)
    dp.register_message_handler(check_central_hole_wheels,
                                lambda message: not message.text.isdigit() or float(message.text) > 100,
                                state=NewPostWheels.central_hole)
    dp.register_message_handler(save_central_hole_wheels,
                                state=NewPostWheels.central_hole)
    dp.register_message_handler(check_price_wheels,
                                lambda message: not message.text.isdigit() or float(message.text) > 100000,
                                state=NewPostWheels.price)
    dp.register_message_handler(save_price_wheels,
                                state=NewPostWheels.price)
    dp.register_message_handler(check_number_of_sets_wheels,
                                lambda message: not message.text.isdigit(),
                                state=NewPostWheels.number_of_sets)
    dp.register_message_handler(save_number_of_sets_wheels,
                                state=NewPostWheels.number_of_sets)