from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from Python.Mak_Gripe_bot.auxiliary_files.config import token_API, ADMIN, chanel_URL, chanel_ID, bot_URL
from Python.Mak_Gripe_bot.keyboards.kb import kb_menu_admin, kb_cancel_admin, kb_speed, kb_season
from Python.Mak_Gripe_bot.sql.sqlite import random_article, create_tires, edit_tires

import sqlite3



storage = MemoryStorage()
bot = Bot(token_API)
dp = Dispatcher(bot=bot,
                storage=storage)



class NewPostTires(StatesGroup):
    photo = State()
    manufacturer = State()
    model = State()
    width = State()
    height = State()
    diameter = State()
    load = State()
    speed = State()
    season = State()
    remainder_tread = State()
    price = State()
    number_of_sets = State()



async def cancel_command_admin(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–ö–∞–∫ —Å–∫–∞–∂–µ—Ç–µ!\n'
                                f'–ß–µ–º –µ—â—ë –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?</i>',
                           reply_markup=kb_menu_admin,
                           parse_mode="HTML")
    await state.finish()

async def create_post_tires(message: types.Message) -> None:
    await NewPostTires.photo.set()
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–ü—Ä–∏–Ω—è—Ç–æ!\n\n'
                                f'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞, '
                                f'–∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤ –¥–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–µ.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await create_tires(random_article=random_article)

async def check_photo_tires(message: types.Message) -> None:
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!\n'
                                f'–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')

async def save_photo_tires(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_tires:
        data_tires['photo'] = message.photo[2].file_id
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n'
                                f'–ê —Å–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ —ç—Ç–∏—Ö —à–∏–Ω.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostTires.next()

async def save_manufacturer_tires(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_tires:
        data_tires['manufacturer'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–ß—Ç–æ –∂... –ù–∞–∑–æ–≤–∏ –º–Ω–µ –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostTires.next()

async def save_model_tires(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_tires:
        data_tires['model'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–î–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö?\n'
                                f'–ö–∞–∫–æ–≤–∞ —à–∏—Ä–∏–Ω–∞ —à–∏–Ω—ã?</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostTires.next()

async def check_width_tires(message: types.Message) -> None:
    await bot.send_message(chat_id=ADMIN,
                           text=f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ —Ä–µ–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞!\n\n–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')

async def save_width_tires(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_tires:
        data_tires['width'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–ê –≤—ã—Å–æ—Ç–∞ –∫–∞–∫–∞—è?</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostTires.next()

async def check_height_tires(message: types.Message) -> None:
    await bot.send_message(chat_id=ADMIN,
                           text=f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ —Ä–µ–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–Ω–∞!\n\n'
                                f'–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')

async def save_height_tires(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_tires:
        data_tires['height'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–ê —á—Ç–æ –∫–∞—Å–∞–µ–º–æ –¥–∏–∞–º–µ—Ç—Ä–∞?\n'
                                f'–ù–∞–ø–∏—à–∏ –º–Ω–µ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –¥—é–π–º–∞—Ö.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostTires.next()

async def check_diameter_tires(message: types.Message) -> None:
    await bot.send_message(chat_id=ADMIN,
                           text=f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä!\n\n'
                                f'–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')

async def save_diameter_tires(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_tires:
        data_tires['diameter'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–ê –∏–Ω–¥–µ–∫—Å –Ω–∞–≥—Ä—É–∑–∫–∏?\n'
                                f'–û –Ω—ë–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –±—É–¥—É—â–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º! –ö–∞–∫–æ–π –æ–Ω?</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostTires.next()

async def check_load_tires(message: types.Message) -> None:
    await bot.send_message(chat_id=ADMIN,
                           text=f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞–≥—Ä—É–∑–∫–∏!\n\n'
                                f'–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')

async def save_load_tires(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_tires:
        data_tires['load'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è –º—ã —á—É—Ç—å –Ω–µ –∑–∞–±—ã–ª–∏ –ø—Ä–æ –∏–Ω–¥–µ–∫—Å —Å–∫–æ—Ä–æ—Å—Ç–∏... ü§î\n\n'
                                f'–¢–æ–≥–¥–∞ –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.</i>',
                           reply_markup=kb_speed,
                           parse_mode='HTML')
    await NewPostTires.next()

async def save_t_callback_handler_tires(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_tires:
        data_tires['speed'] = 'T'
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–î–∞–≤–∞–π —É–∫–∞–∂–µ–º –Ω–∞ –∫–∞–∫–æ–π —Å–µ–∑–æ–Ω —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã —ç—Ç–∏ —à–∏–Ω—ã?\n\n'
                                f'–ö–∞–∫ –∏ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑, —Ç—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, '
                                f'–∫–ª–∏–∫–Ω—É–≤ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É.</i>',
                           reply_markup=kb_season,
                           parse_mode='HTML')
    await NewPostTires.next()

async def save_h_callback_handler_tires(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_tires:
        data_tires['speed'] = 'H'
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–î–∞–≤–∞–π —É–∫–∞–∂–µ–º –Ω–∞ –∫–∞–∫–æ–π —Å–µ–∑–æ–Ω —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã —ç—Ç–∏ —à–∏–Ω—ã?\n\n'
                                f'–ö–∞–∫ –∏ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑, —Ç—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, '
                                f'–∫–ª–∏–∫–Ω—É–≤ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É.</i>',
                           reply_markup=kb_season,
                           parse_mode='HTML')
    await NewPostTires.next()

async def save_r_callback_handler_tires(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_tires:
        data_tires['speed'] = 'R'
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–î–∞–≤–∞–π —É–∫–∞–∂–µ–º –Ω–∞ –∫–∞–∫–æ–π —Å–µ–∑–æ–Ω —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã —ç—Ç–∏ —à–∏–Ω—ã?\n\n'
                                f'–ö–∞–∫ –∏ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑, —Ç—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, '
                                f'–∫–ª–∏–∫–Ω—É–≤ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É.</i>',
                           reply_markup=kb_season,
                           parse_mode='HTML')
    await NewPostTires.next()

async def save_v_callback_handler_tires(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_tires:
        data_tires['speed'] = 'V'
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–î–∞–≤–∞–π —É–∫–∞–∂–µ–º –Ω–∞ –∫–∞–∫–æ–π —Å–µ–∑–æ–Ω —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã —ç—Ç–∏ —à–∏–Ω—ã?\n\n'
                                f'–ö–∞–∫ –∏ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑, —Ç—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, '
                                f'–∫–ª–∏–∫–Ω—É–≤ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É.</i>',
                           reply_markup=kb_season,
                           parse_mode='HTML')
    await NewPostTires.next()

async def save_winter_studded_callback_handler_tires(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_tires:
        data_tires['season'] = '–ó–∏–º–Ω–∏–µ —à–∏–ø–æ–≤–∞–Ω–Ω—ã–µ'
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–£—Ä–∞! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ!\n'
                                f'–î–∞–≤–∞–π —Ç–∞–∫–∂–µ —É–∫–∞–∂–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostTires.next()

async def save_winter_non_studded_callback_handler_tires(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_tires:
        data_tires['season'] = '–ó–∏–º–Ω–∏–µ –Ω–µ—à–∏–ø–æ–≤–∞–Ω–Ω—ã–µ'
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–£—Ä–∞! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ!\n'
                                f'–î–∞–≤–∞–π —Ç–∞–∫–∂–µ —É–∫–∞–∂–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostTires.next()

async def save_summer_callback_handler_tires(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_tires:
        data_tires['season'] = '–õ–µ—Ç–Ω–∏–µ'
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–£—Ä–∞! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ!\n'
                                f'–î–∞–≤–∞–π —Ç–∞–∫–∂–µ —É–∫–∞–∂–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostTires.next()

async def save_all_season_callback_handler_tires(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_tires:
        data_tires['season'] = '–í—Å–µ—Å–µ–∑–æ–Ω–Ω—ã–µ'
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–£—Ä–∞! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ!\n'
                                f'–î–∞–≤–∞–π —Ç–∞–∫–∂–µ —É–∫–∞–∂–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostTires.next()

async def check_remainder_tread_tires(message: types.Message) -> None:
    await bot.send_message(chat_id=ADMIN,
                           text=f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞!\n\n'
                                f'–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')

async def save_remainder_tread_tires(message: types.Message, state: FSMContext):
    async with state.proxy() as data_tires:
        data_tires['remainder_tread'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏ –º–Ω–µ —Ü–µ–Ω—É –∑–∞ –æ–¥–∏–Ω –∫–æ–º–ø–ª–µ–∫—Ç —à–∏–Ω.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostTires.next()

async def check_price_tires(message: types.Message) -> None:
    await bot.send_message(chat_id=ADMIN,
                           text=f'–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞!\n\n'
                                f'–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')

async def save_price_tires(message: types.Message, state: FSMContext):
    async with state.proxy() as data_tires:
        data_tires['price'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ!\n\n'
                                f'–î–∞–≤–∞–π –∑–∞–Ω–µ—Å—ë–º –≤ –Ω–∞—à—É –±–∞–∑—É —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –±—É–¥–µ—Ç —ç—Ç–∏—Ö –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤, '
                                f'—á—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –µ–≥–æ –∏ —É–º–µ–Ω—å—à–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, '
                                f'–∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –ø—Ä–æ–¥–∞–Ω –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω.</i>',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')
    await NewPostTires.next()

async def check_number_of_sets_tires(message: types.Message) -> None:
    await bot.send_message(chat_id=ADMIN,
                           text=f'–¢—ã —É–∫–∞–∑—ã–≤–∞–µ—à—å –º–Ω–µ –Ω–µ —á–∏—Å–ª–æ!\n\n'
                                f'–î–∞–≤–∞–π —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?',
                           reply_markup=kb_cancel_admin,
                           parse_mode='HTML')

async def save_number_of_sets_tires(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_tires:
        data_tires['number_of_sets'] = message.text
    await bot.send_message(chat_id=ADMIN,
                           text=f'<i>–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ! –Ø –∏ —Å–∞–º —É–∂–µ –ø–æ–¥—É—Å—Ç–∞–ª...\n\n'
                                f'–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∏—Å—å –≤ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ –Ω–∞ —Ç–≤–æ—ë–º Telegram-–∫–∞–Ω–∞–ª–µ - '
                                f'<a href="{chanel_URL}">MakGripe | –ú–∞–∫–ì—Ä–∞–π–ø</a></i>',
                           reply_markup=kb_menu_admin,
                           parse_mode='HTML')
    async with state.proxy() as data_tires:
        msg = await bot.send_photo(chat_id=chanel_ID,
                                   photo=data_tires['photo'],
                                   caption=f'<b>{data_tires["manufacturer"]} {data_tires["model"]} '
                                           f'{data_tires["width"]}/{data_tires["height"]} D{data_tires["diameter"]} '
                                           f'{data_tires["load"]}{data_tires["speed"]}</b>\n\n'
                                           f'–¶–µ–Ω–∞: <u>{data_tires["price"]}</u> —Ä—É–±–ª–µ–π\n'
                                           f'–ê—Ä—Ç–∏–∫—É–ª: {random_article}\n\n'
                                           f'<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</b>\n\n'
                                           f'üöò –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: –õ–µ–≥–∫–æ–≤—ã–µ —à–∏–Ω—ã\n'
                                           f'üöò –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ë/—É\n'
                                           f'üöò –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {data_tires["manufacturer"]}\n'
                                           f'üöò –ú–æ–¥–µ–ª—å: {data_tires["model"]}\n'
                                           f'üöò –®–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞: {data_tires["width"]}/{data_tires["height"]}\n'
                                           f'üöò –î–∏–∞–º–µ—Ç—Ä –≤ –¥—é–π–º–∞—Ö: {data_tires["diameter"]}\n'
                                           f'üöò –ò–Ω–¥–µ–∫—Å –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏: {data_tires["load"]}{data_tires["speed"]}\n'
                                           f'üöò –í—Ä–µ–º—è –≥–æ–¥–∞: {data_tires["season"]}\n'
                                           f'üöò Run Flat: –ù–µ—Ç\n'
                                           f'üöò –û—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞: {data_tires["remainder_tread"]} –º–º.\n\n'
                                           f'–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, '
                                           f'–Ω–∞–ø–∏—Å–∞–≤ –Ω–∞—à–µ–º—É Telegram-–±–æ—Ç—É - <a href="{bot_URL}">Mak_Gripe_bot</a>',
                                   parse_mode='HTML')
        con = sqlite3.connect('C:\\Users\\nastm\\OneDrive\\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\\Python\\Mak_Gripe_bot\\sql\\database.db')
        with con:
            cur = con.cursor()
            cur.execute(
                'UPDATE tires SET msg_chanel_id = "{msg_chanel_id}" WHERE article == "{article}"'.format(
                    msg_chanel_id=msg.message_id,
                    article=random_article
                )
            )
    await edit_tires(state=state, random_article=random_article)
    await state.finish()

def register_handlers_dialogue_admin_tires(dp: Dispatcher) -> None:
    dp.register_message_handler(cancel_command_admin,
                                Text(equals='–û—Ç–º–µ–Ω–∏—Ç—å',
                                     ignore_case=True),
                                state='*')
    dp.register_message_handler(create_post_tires,
                                Text(equals='–õ–µ–≥–∫–æ–≤—ã–µ —à–∏–Ω—ã',
                                     ignore_case=True),
                                state=None)
    dp.register_message_handler(check_photo_tires,
                                lambda message: not message.photo,
                                state=NewPostTires.photo)
    dp.register_message_handler(save_photo_tires,
                                content_types=['photo'],
                                state=NewPostTires.photo)
    dp.register_message_handler(save_manufacturer_tires,
                                state=NewPostTires.manufacturer)
    dp.register_message_handler(save_model_tires,
                                state=NewPostTires.model)
    dp.register_message_handler(check_width_tires,
                                lambda message: not message.text.isdigit() or float(message.text) > 1000,
                                state=NewPostTires.width)
    dp.register_message_handler(save_width_tires,
                                state=NewPostTires.width)
    dp.register_message_handler(check_height_tires,
                                lambda message: not message.text.isdigit() or float(message.text) > 100,
                                state=NewPostTires.height)
    dp.register_message_handler(save_height_tires,
                                state=NewPostTires.height)
    dp.register_message_handler(check_diameter_tires,
                                lambda message: not message.text.isdigit() or float(message.text) > 100,
                                state=NewPostTires.diameter)
    dp.register_message_handler(save_diameter_tires,
                                state=NewPostTires.diameter)
    dp.register_message_handler(check_load_tires,
                                lambda message: not message.text.isdigit() or float(message.text) > 1000,
                                state=NewPostTires.load)
    dp.register_message_handler(save_load_tires,
                                state=NewPostTires.load)
    dp.register_callback_query_handler(save_t_callback_handler_tires,
                                       lambda callback_query: callback_query.data == 'speed_T',
                                       state=NewPostTires.speed)
    dp.register_callback_query_handler(save_h_callback_handler_tires,
                                       lambda callback_query: callback_query.data == 'speed_H',
                                       state=NewPostTires.speed)
    dp.register_callback_query_handler(save_r_callback_handler_tires,
                                       lambda callback_query: callback_query.data == 'speed_R',
                                       state=NewPostTires.speed)
    dp.register_callback_query_handler(save_v_callback_handler_tires,
                                       lambda callback_query: callback_query.data == 'speed_V',
                                       state=NewPostTires.speed)
    dp.register_callback_query_handler(save_winter_studded_callback_handler_tires,
                                       lambda callback_query: callback_query.data == 'winter_studded',
                                       state=NewPostTires.season)
    dp.register_callback_query_handler(save_winter_non_studded_callback_handler_tires,
                                       lambda callback_query: callback_query.data == 'winter_non_studded',
                                       state=NewPostTires.season)
    dp.register_callback_query_handler(save_summer_callback_handler_tires,
                                       lambda callback_query: callback_query.data == 'summer',
                                       state=NewPostTires.season)
    dp.register_callback_query_handler(save_all_season_callback_handler_tires,
                                       lambda callback_query: callback_query.data == 'all_season',
                                       state=NewPostTires.season)
    dp.register_message_handler(check_remainder_tread_tires,
                                lambda message: not message.text.isdigit() or float(message.text) > 1000,
                                state=NewPostTires.remainder_tread)
    dp.register_message_handler(save_remainder_tread_tires,
                                state=NewPostTires.remainder_tread)
    dp.register_message_handler(check_price_tires,
                                lambda message: not message.text.isdigit() or float(message.text) > 100000,
                                state=NewPostTires.price)
    dp.register_message_handler(save_price_tires,
                                state=NewPostTires.price)
    dp.register_message_handler(check_number_of_sets_tires,
                                lambda message: not message.text.isdigit(),
                                state=NewPostTires.number_of_sets)
    dp.register_message_handler(save_number_of_sets_tires,
                                state=NewPostTires.number_of_sets)